# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import studiovoice_pb2 as studiovoice__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in studiovoice_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MaxineStudioVoiceStub(object):
    """The MaxineStudioVoice service provides APIs to run the
    Maxine Studio Voice NIM.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnhanceAudio = channel.stream_stream(
                '/nvidia.maxine.studiovoice.v1.MaxineStudioVoice/EnhanceAudio',
                request_serializer=studiovoice__pb2.EnhanceAudioRequest.SerializeToString,
                response_deserializer=studiovoice__pb2.EnhanceAudioResponse.FromString,
                _registered_method=True)


class MaxineStudioVoiceServicer(object):
    """The MaxineStudioVoice service provides APIs to run the
    Maxine Studio Voice NIM.
    """

    def EnhanceAudio(self, request_iterator, context):
        """EnhanceAudio is a bidirectional streaming RPC to run the
        Maxine Studio Voice NIM on audio files.

        The client streams the input audio file in chunks in the input message and 
        receives the output audio file in chunks in the output message.

        The client should only pass one audio file per RPC invocation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MaxineStudioVoiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnhanceAudio': grpc.stream_stream_rpc_method_handler(
                    servicer.EnhanceAudio,
                    request_deserializer=studiovoice__pb2.EnhanceAudioRequest.FromString,
                    response_serializer=studiovoice__pb2.EnhanceAudioResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nvidia.maxine.studiovoice.v1.MaxineStudioVoice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nvidia.maxine.studiovoice.v1.MaxineStudioVoice', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MaxineStudioVoice(object):
    """The MaxineStudioVoice service provides APIs to run the
    Maxine Studio Voice NIM.
    """

    @staticmethod
    def EnhanceAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/nvidia.maxine.studiovoice.v1.MaxineStudioVoice/EnhanceAudio',
            studiovoice__pb2.EnhanceAudioRequest.SerializeToString,
            studiovoice__pb2.EnhanceAudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
